// ---------- Providers ----------
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------- Enums ----------
enum StoryStatus {
  DRAFT
  GENERATING
  READY
  CANCELLED
}

enum JobStatus {
  SUBMITTED
  PROCESSING
  SUCCEED
  FAILED
}

enum VideoQuality {
  LOW // 10 seconds
  MEDIUM // 60 seconds
  HIGH // ~10 minutes
}

enum ImageQuality {
  LOW
  MEDIUM
  HIGH
}

// New enum for element categories
enum ElementCategory {
  CHARACTER
  PET
  LOCATION
  OBJECT
}

// ---------- Core tables ----------
model User {
  id         String           @id // equals Clerk userId
  credits    Int              @default(0)
  createdAt  DateTime         @default(now())
  stories    Story[]
  images     ImageVariant[]
  videoTasks VideoTask[]
  musicTasks MusicTask[]
  ledger     CreditLedger[]
  myWorld    MyWorldElement[] // Added relation to user's personal elements
}

model Story {
  id            String         @id @default(cuid())
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  title         String
  theme         String // Theme/prompt selected by the user
  visualStyle   String // ID of the visual style
  styleName     String // Name of the visual style for quick reference
  language      String         @default("en")
  status        StoryStatus    @default(DRAFT)
  pdfUrl        String? // Generated PDF URL
  animationUrl  String? // Generated video URL if animation was requested
  musicUrl      String? // Generated/selected music URL if added
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  pages         StoryPage[]
  videoTasks    VideoTask[]    @relation("StoryVideoTasks")
  musicTasks    MusicTask[]    @relation("StoryMusicTasks")
  storyElements StoryElement[] // Elements used in this story
}

// New model for story elements
model StoryElement {
  id             String         @id @default(cuid())
  story          Story          @relation(fields: [storyId], references: [id])
  storyId        String
  myWorldElement MyWorldElement @relation(fields: [elementId], references: [id])
  elementId      String
  createdAt      DateTime       @default(now())

  @@unique([storyId, elementId])
}

// New model for My World elements
model MyWorldElement {
  id                String          @id @default(cuid())
  name              String
  description       String          @db.Text // Generated by GPT Vision or edited by user
  imageUrl          String
  publicId          String? // For Cloudinary reference
  category          ElementCategory
  isDefault         Boolean         @default(false) // Whether this is a default element or user-uploaded
  isDetectedInStory Boolean         @default(false) // Whether this element was detected in a story by AI
  user              User?           @relation(fields: [userId], references: [id]) // Null for default elements
  userId            String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  stories           StoryElement[]

  @@index([userId, category]) // Index for faster lookups
}

model StoryPage {
  id            String         @id @default(cuid())
  story         Story          @relation(fields: [storyId], references: [id])
  storyId       String
  index         Int // Page number in the story
  text          String         @db.Text // Main story text
  chosenImageId String?        @unique
  variants      ImageVariant[] @relation("PageVariants")
  chosenImage   ImageVariant?  @relation("ChosenImage", fields: [chosenImageId], references: [id])
  videoTasks    VideoTask[]    @relation("PageVideoTasks")

  // New fields for the review & edit functionality
  editedText   String?  @db.Text // User-edited version of the text
  microprompts String[] // Array of microprompts used for image remixing
}

model ImageVariant {
  id            String       @id @default(cuid())
  page          StoryPage?   @relation("PageVariants", fields: [pageId], references: [id])
  pageId        String?
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  publicId      String
  secureUrl     String
  width         Int?
  height        Int?
  templateKey   String? // "original", "edit", "generated"
  quality       ImageQuality @default(HIGH)
  isChosen      Boolean      @default(false)
  createdAt     DateTime     @default(now())
  chosenForPage StoryPage?   @relation("ChosenImage")
}

// ---------- Async job tables ----------
model VideoTask {
  /// Kling task-id or similar
  id          String       @id
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  story       Story?       @relation("StoryVideoTasks", fields: [storyId], references: [id])
  storyId     String?
  page        StoryPage?   @relation("PageVideoTasks", fields: [pageId], references: [id])
  pageId      String?
  prompt      String
  imageUrl    String
  quality     VideoQuality @default(LOW)
  status      JobStatus    @default(SUBMITTED)
  videoUrl    String?
  durationSec Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model MusicTask {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  story     Story?    @relation("StoryMusicTasks", fields: [storyId], references: [id])
  storyId   String?
  prompt    String
  status    JobStatus @default(SUBMITTED)
  musicUrl  String?
  duration  Int? // Duration in seconds
  isCustom  Boolean   @default(true) // Whether this is a custom generated music or from library
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// New model for predefined music library
model MusicLibrary {
  id        String   @id @default(cuid())
  title     String
  artist    String?
  category  String // e.g., "Happy", "Adventurous", "Calm"
  duration  Int // Duration in seconds
  musicUrl  String
  isDefault Boolean  @default(true)
  createdAt DateTime @default(now())
}

// New model for visual styles
model VisualStyle {
  id        String   @id @default(cuid())
  name      String
  imageUrl  String // Thumbnail preview
  isDefault Boolean  @default(true)
  createdAt DateTime @default(now())
}

// ---------- Credits ----------
model CreditLedger {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  delta     Int
  reason    String
  createdAt DateTime @default(now())
}
