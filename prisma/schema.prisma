// ---------- Providers ----------
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------- Enums ----------
enum StoryStatus {
  DRAFT
  GENERATING
  READY
  CANCELLED
}

enum JobStatus {
  SUBMITTED
  PROCESSING
  SUCCEED
  FAILED
}

enum VideoQuality {
  LOW
  MEDIUM
  HIGH
}

enum ImageQuality {
  LOW
  MEDIUM
  HIGH
}

// ---------- Core tables ----------
model User {
  id         String         @id // equals Clerk userId
  credits    Int            @default(0)
  createdAt  DateTime       @default(now())
  stories    Story[]
  images     ImageVariant[]
  videoTasks VideoTask[]
  musicTasks MusicTask[]
  ledger     CreditLedger[]
}

model Story {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  title       String
  theme       String
  visualStyle String
  language    String      @default("en")
  status      StoryStatus @default(DRAFT)
  pdfUrl      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  pages       StoryPage[]
  videoTasks  VideoTask[] @relation("StoryVideoTasks")
  musicTasks  MusicTask[] @relation("StoryMusicTasks")
}

model StoryPage {
  id            String         @id @default(cuid())
  story         Story          @relation(fields: [storyId], references: [id])
  storyId       String
  index         Int
  text          String
  chosenImageId String?        @unique
  variants      ImageVariant[] @relation("PageVariants")
  chosenImage   ImageVariant?  @relation("ChosenImage", fields: [chosenImageId], references: [id])
  videoTasks    VideoTask[]    @relation("PageVideoTasks")
}

model ImageVariant {
  id            String       @id @default(cuid())
  page          StoryPage?   @relation("PageVariants", fields: [pageId], references: [id])
  pageId        String?
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  publicId      String
  secureUrl     String
  width         Int?
  height        Int?
  templateKey   String? // "original", "edit", "generated"
  quality       ImageQuality @default(HIGH)
  isChosen      Boolean      @default(false)
  createdAt     DateTime     @default(now())
  chosenForPage StoryPage?   @relation("ChosenImage")
}

// ---------- Async job tables ----------
model VideoTask {
  /// Kling task-id or similar
  id          String       @id
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  story       Story?       @relation("StoryVideoTasks", fields: [storyId], references: [id])
  storyId     String?
  page        StoryPage?   @relation("PageVideoTasks", fields: [pageId], references: [id])
  pageId      String?
  prompt      String
  imageUrl    String
  quality     VideoQuality @default(LOW)
  status      JobStatus    @default(SUBMITTED)
  videoUrl    String?
  durationSec Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model MusicTask {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  story     Story?    @relation("StoryMusicTasks", fields: [storyId], references: [id])
  storyId   String?
  prompt    String
  status    JobStatus @default(SUBMITTED)
  musicUrl  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// ---------- Credits ----------
model CreditLedger {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  delta     Int
  reason    String
  createdAt DateTime @default(now())
}
